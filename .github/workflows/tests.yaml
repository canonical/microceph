name: Tests
on: [push, pull_request]
jobs:
  unit-tests:
    runs-on: ubuntu-20.04
    env:
      GOROOT: ""
      PATH: /snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
    strategy:
      matrix:
        gochannel:
          - latest/edge
          - latest/stable
    steps:
      - name: Install the go snap
        run: |
          set -euxo pipefail
          sudo snap install --classic --channel=${{ matrix.gochannel }} go
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get dependencies
        run: |
          set -euxo pipefail
          sudo add-apt-repository -y ppa:dqlite/stable
          sudo apt -y install libsqlite3-dev libdqlite-dev
          go mod download -x
      - name: Format
        run: |
          set -euxo pipefail
          FMT=$(gofmt -d -l .)
          if [ ! -z "$FMT" ]; then
              echo "$FMT"
              exit 1
          fi
      - name: Test
        run: |
          set -euxo pipefail
          rm -rf .coverage
          mkdir .coverage
          go test -v -cover -coverprofile=.coverage/profile.out ./... | \
              tee /tmp/gotest-output
          # MISSING_TESTS="$(grep .*\]$ /tmp/gotest-output)"
          # if [ ! -z "$MISSING_TESTS" ]; then
          #     echo -n "The following modules appear to have an issue with "
          #     echo "their test coverage:"
          #     echo "$MISSING_TESTS"
          #     exit 1
          # fi
          # FIXME enable once the canonical organization accepts codecov.io
          # and this repository is made public
          # curl -s https://codecov.io/bash | bash /dev/stdin -f .coverage/coverage.out
      - name: Vet
        run: |
          set -euxo pipefail
          go vet ./...
  snap:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        confinement:
          - confined
          - devmode
    steps:
      - name: Install build dependencies
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt remove --purge lxd lxd-client
          sudo snap install snapcraft --edge --classic
          sudo snap install lxd
          sudo lxd waitready
          sudo lxd init --auto
          sudo chmod 0666 /var/snap/lxd/common/lxd/unix.socket
          echo "/snap/bin" >> $GITHUB_PATH

      - name: Maybe build snapd
        shell: bash
        run: |
          set -euxo pipefail
          if [ ${{ matrix.confinement }} = "devmode" ]; then
            echo skip
            exit 0
          fi
          mkdir -p src/github.com/snapcore/
          cd ./src/github.com/snapcore/
          git clone https://github.com/snapcore/snapd
          cd snapd
          git config user.email "ci-bot@localhost"
          git config user.name "MicroCeph CI builder"
          git remote update
          git fetch origin pull/9547/head:pr-9547
          git fetch origin pull/9585/head:pr-9585
          git checkout pr-9547
          git cherry-pick pr-9585
          snapcraft snap --use-lxd
          sudo snap install *.snap --dangerous
          snapcraft clean --use-lxd

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        shell: bash
        run: |
          set -euxo pipefail
          snapcraft snap --use-lxd

      - name: Install built snap
        shell: bash
        run: |
          set -euxo pipefail
          if [ ${{ matrix.confinement }} = "devmode" ]; then
              devmode="--devmode"
          else
              devmode=""
          fi
          sudo snap install *.snap --dangerous $devmode
          if [ -z "$devmode" ]; then
              for interface in \
                      block-devices \
                      device-mapper-support \
                      device-mapper-control \
                      hardware-observe \
                      lvm-control \
                      mount-observe \
                      network \
                      network-bind \
                      network-control \
                      tmpfs-mount \
                      ; do
                  sudo snap connect microceph:$interface
              done
          fi

      - name: Smoke test
        shell: bash
        run: |
          set -euxo pipefail
          # NOTE: The kernel version used does not have per_host_store support
          # so we can only use one block device from scsi_debug
          sudo modprobe scsi_debug add_host=1 dev_size_mb=1024
          sudo apt -y install lsscsi
          sudo microceph init
          sleep 5
          echo
          echo
          sudo microceph.ceph -s
          for raw_disk in $(sudo lsscsi|awk '/scsi_debug/{print$6}'); do
              sudo microceph.ceph-volume lvm prepare \
                  --data $raw_disk
          done
          sudo microceph.ceph-osd --cluster ceph --id 0
          sleep 5
          echo
          echo
          sudo microceph.ceph -s
          sudo microceph.ceph osd pool create bench 16 16
          sudo microceph.rados bench -p bench -t 2 10 write
