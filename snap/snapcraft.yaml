name: microceph
base: core20
adopt-info: ceph
summary: Ceph for a one-rack cluster and appliances
description: |
  MicroCeph begins
grade: devel
confinement: strict

environment:
  LD_LIBRARY_PATH: $SNAP/lib:$SNAP/lib/$SNAPCRAFT_ARCH_TRIPLET:$SNAP/lib/$SNAPCRAFT_ARCH_TRIPLET/ceph:$SNAP/usr/lib:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/ceph:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/ceph/compressor:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/ceph/crypto:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/ceph/erasure-code
  PATH: $SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH
  PYTHONPATH: $SNAP/usr/lib/python3.8:$SNAP/usr/lib/python3/dist-packages
  TMPDIR: $SNAP_COMMON/tmp

layout:
  # for dynamic loading of plugins
  /usr/lib/$SNAPCRAFT_ARCH_TRIPLET/ceph:
    symlink: $SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/ceph
  /etc/ceph:
    symlink: $SNAP_COMMON/etc/ceph
  /var/lib/ceph:
    symlink: $SNAP_COMMON/var/lib/ceph
  /var/log/ceph:
    symlink: $SNAP_COMMON/var/log/ceph

# NOTE: Most of these apps exist for PoC type testing and may be removed before
# we ship anything. Most interaction should happen through the autonomous
# `microceph` control plane and supporting CLI commands.
apps:
  microceph:
    command: bin/microceph.sh
    plugs:
      - block-devices
      - device-mapper-control
      - device-mapper-support
      - hardware-observe
      - lvm-control
      - mount-observe
      - network
      - network-bind
      - network-control
      - network-observe
      - tmpfs-mount
  ceph:
    command: usr/bin/ceph
    plugs:
      - network
      - network-bind
  ceph-authtool:
    command: usr/bin/ceph-authtool
  ceph-mon:
    command: bin/launchers/ceph-mon
    daemon: simple
    plugs:
      - network
      - network-bind
  ceph-mgr:
    command: bin/launchers/ceph-mgr
    daemon: simple
    plugs:
      - network
      - network-bind
  ceph-osd:
    command: usr/bin/ceph-osd
    plugs:
      - block-devices
      - device-mapper-control
      - device-mapper-support
      - hardware-observe
      - lvm-control
      - mount-observe
      - network
      - network-bind
      - network-control
      - tmpfs-mount
  ceph-volume:
    command: usr/sbin/ceph-volume
    plugs:
      - block-devices
      - device-mapper-control
      - device-mapper-support
      - hardware-observe
      - lvm-control
      - mount-observe
      - network
      - network-bind
      - network-control
      - tmpfs-mount
  monmaptool:
    command: usr/bin/monmaptool
  rados:
    command: usr/bin/rados
    plugs:
      - network
      - network-bind

parts:
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/launchers/
  raft:
    source: https://github.com/canonical/raft
    source-type: git
    source-depth: 1
    plugin: autotools
    stage-packages:
      - libuv1
    build-packages:
      - libuv1-dev
    stage:
      - usr/local/include/*
      - usr/local/lib/*
  sqlite:
    source: https://github.com/sqlite/sqlite
    source-type: git
    source-depth: 1
    source-tag: version-3.33.0
    plugin: autotools
    build-packages:
      - tcl
    stage:
      - usr/local/include/*
      - usr/local/lib/*
  dqlite:
    after:
      - raft
      - sqlite
    source: https://github.com/canonical/dqlite
    source-type: git
    source-depth: 1
    plugin: autotools
    build-environment:
      - SQLITE_CFLAGS: -I$SNAPCRAFT_STAGE/usr/local/include
      - SQLITE_LIBS: -L$SNAPCRAFT_STAGE/usr/local/lib
    stage-packages:
      - libuv1
    build-packages:
      - libuv1-dev
      - pkg-config
    stage:
      - usr/local/include/*
      - usr/local/lib/*
  ceph:
    plugin: nil
    override-pull: |
      snapcraftctl pull
      CEPH_VERSION=$(dpkg \
          -f $SNAPCRAFT_PART_SRC/../stage_packages/ceph-mon*.deb \
          Version|cut -f1 -d-)
      GIT_VERSION=$(git -C $SNAPCRAFT_PROJECT_DIR describe --always)
      snapcraftctl set-version $CEPH_VERSION+$GIT_VERSION
    build-packages:
      - git
    stage-packages:
      - ceph-base
      - ceph-mds
      - ceph-mgr
      - ceph-mon
      - ceph-osd
      - dmsetup     # we need to ship `dmestup`
      - lvm2        # we need to ship LVM tools
      - mount       # we need to ship `mount`
      - udev        # we need to ship `udevadm`
      - util-linux  # we need to ship `blkid`
    filesets:
      exclude-ceph-volume:
        - -usr/sbin/ceph-volume*
        - -usr/lib/python3/dist-packages/ceph_volume*
    stage:
      - $exclude-ceph-volume
  ceph-volume:
    # The upstream Ceph sources hard codes the service username 'ceph' several
    # places in the code base for the `ceph-volume` program. When running under
    # a Mandatory Access Control regime such as AppArmor as enforced by a
    # strict confined snap, the point of running as non-root user becomes moot.
    plugin: python
    source: https://git.launchpad.net/ubuntu/+source/ceph
    source-type: git
    source-branch: ubuntu/focal-updates
    override-pull: |
      snapcraftctl pull
      patch -p1 < $SNAPCRAFT_PROJECT_DIR/snap/local/patch/ceph-volume-drop-hardcoded-user.patch
      patch -p1 < $SNAPCRAFT_PROJECT_DIR/snap/local/patch/ceph-volume-check-owner-before-chown.patch
    override-build: |
      dpkg-source --before-build .
      cd src/ceph-volume
      python3 setup.py bdist
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/lib/python3/dist-packages
      python3 setup.py install --prefix $SNAPCRAFT_PART_INSTALL --install-lib $SNAPCRAFT_PART_INSTALL/usr/lib/python3/dist-packages
    build-packages:
      - python3-setuptools
      - dpkg-dev
    organize:
      bin/ceph-volume: usr/sbin/ceph-volume
      bin/ceph-volume-systemd: usr/sbin/ceph-volume-systemd
  transitional-bash-cli:
    source: cli/
    plugin: dump
    organize:
      microceph.sh: bin/microceph.sh
    stage-packages:
      - uuid-runtime
  microceph:
    after: [dqlite, raft, sqlite]
    source: .
    plugin: go
    go-buildtags: [libsqlite3]
    build-environment:
      - CGO_CFLAGS: -I$SNAPCRAFT_STAGE/usr/local/include
      - CGO_LDFLAGS: -L$SNAPCRAFT_STAGE/usr/local/lib
