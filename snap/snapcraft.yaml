name: microceph
base: core24
adopt-info: ceph
grade: stable
source-code: https://github.com/canonical/microceph.git
license: AGPL-3.0
summary: Simple clustered Ceph deployment
description: |-
 MicroCeph is snap-deployed Ceph with built-in clustering.

confinement: strict

plugs:
  load-rbd:
    interface: kernel-module-load
    modules:
      - name: rbd
        load: on-boot

slots:
  ceph-logs:
    interface: content
    source:
      read:
        - "$SNAP_COMMON/logs"

  ceph-conf:
    interface: content
    source:
      read:
        - "$SNAP_DATA/conf"

environment:
  LD_LIBRARY_PATH: $SNAP/lib:$SNAP/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR:$SNAP/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/ceph:$SNAP/lib:$SNAP/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR:$SNAP/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/ceph:$SNAP/lib/ganesha:$SNAP/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/ceph/compressor:$SNAP/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/ceph/crypto:$SNAP/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/ceph/erasure-code
  PYTHONPATH: $SNAP/lib/python3/dist-packages

layout:
  /usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/ceph:
    symlink: $SNAP/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/ceph
  /usr/lib/ganesha:
    symlink: $SNAP/lib/ganesha
  /usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/rados-classes:
    symlink: $SNAP/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/rados-classes
  /etc/ceph:
    bind: $SNAP_DATA/conf
  /etc/ganesha:
    bind: $SNAP_DATA/conf/ganesha
  /usr/share/ceph:
    bind: $SNAP/share/ceph
  /var/lib/ceph:
    bind: $SNAP_COMMON/data
  /var/log/ceph:
    bind: $SNAP_COMMON/logs
  /var/log/ganesha:
    bind: $SNAP_COMMON/logs/ganesha

apps:
  # Service
  daemon:
    command: commands/daemon.start
    daemon: simple
    plugs:
      - block-devices
      - dm-crypt
      - hardware-observe
      - mount-observe
      - network
      - network-bind
      - microceph-support
    slots:
      - microceph
  mds:
    command: commands/mds.start
    daemon: simple
    install-mode: disable
    after:
      - daemon
    plugs:
      - network
      - network-bind
      - process-control
  mon:
    command: commands/mon.start
    daemon: simple
    install-mode: disable
    after:
      - daemon
    plugs:
      - hardware-observe
      - network
      - network-bind
      - process-control
  mgr:
    command: commands/mgr.start
    daemon: simple
    install-mode: disable
    after:
      - daemon
    plugs:
      - network
      - network-bind
      - process-control
  nfs:
    command: commands/nfs-ganesha.start
    daemon: simple
    install-mode: disable
    after:
      - daemon
    plugs:
      - network
      - network-bind
      - process-control
  osd:
    command: commands/osd.start
    reload-command: commands/osd.reload
    daemon: simple
    install-mode: disable
    stop-mode: sigterm-all
    stop-timeout: 5m
    after:
      - daemon
    plugs:
      - block-devices
      - dm-crypt
      - hardware-observe
      - network
      - network-bind
      - microceph-support
      - process-control
  rgw:
    command: commands/rgw.start
    daemon: simple
    install-mode: disable
    after:
      - daemon
    plugs:
      - hardware-observe
      - network
      - network-bind
      - process-control
  "rbd-mirror":
    command: commands/rbd-mirror.start
    daemon: simple
    install-mode: disable
    after:
      - daemon
    plugs:
      - network
      - network-bind
      - process-control
  "cephfs-mirror":
    command: commands/cephfs-mirror.start
    daemon: simple
    install-mode: disable
    after:
      - daemon
    plugs:
      - network
      - network-bind
      - process-control
  # Commands
  ceph:
    command: commands/ceph
    plugs:
      - network
      - home
  "radosgw-admin":
    command: commands/radosgw-admin
    plugs:
      - network
  microceph:
    command: commands/microceph
    plugs:
      - mount-observe
      - network
      - block-devices
      - dm-crypt
      - home
  rbd:
    command: commands/rbd
    plugs:
      - network
      - network-bind
      - microceph-support
      - dm-crypt
  rados:
    command: commands/rados
    plugs:
      - network

parts:
  ceph:
    plugin: nil
    override-prime: |
      craftctl default
      pkg_version=$(
            dpkg-deb -f \
            $CRAFT_PART_SRC/../stage_packages/ceph-common*.deb Version)
      git_version=$(
            git -C $CRAFT_PROJECT_DIR describe \
                --always \
                --dirty \
                --abbrev=10 | sed -s 's/^v//')
      printf "ceph-version: ${pkg_version}\nmicroceph-git: ${git_version}\n" > share/metadata.yaml
    override-stage: |
      craftctl default
      pkg_version=$(
        dpkg-deb -f \
        $CRAFT_PART_SRC/../stage_packages/ceph-common*.deb \
        Version | sed -rne 's/([0-9.]+)[-+].*$$/\1/p' | cut -c1-10)
      git_version=$(
        git -C $CRAFT_PROJECT_DIR describe \
          --always \
          --dirty \
          --abbrev=10)
        # changed as the original string was longer than 32chars.
        craftctl set version=${pkg_version}+snap${git_version}
    stage-packages:
      - ceph-common
      - ceph-mds
      - ceph-mgr
      - ceph-mgr-dashboard
      - ceph-mon
      - ceph-osd
      - radosgw
      - rbd-mirror
      - cephfs-mirror
      # Utilities
      - coreutils
      - uuid-runtime
      - python3-setuptools
      - python3-packaging
      - libatomic1
    organize:
      usr/bin/: bin/
      usr/sbin/: bin/
      usr/lib/: lib/
      usr/share/: share/
    prime:
      - bin/ceph
      - bin/ceph-authtool
      - bin/ceph-bluestore-tool
      - bin/ceph-mds
      - bin/ceph-mgr
      - bin/ceph-mon
      - bin/ceph-osd
      - bin/ceph-conf
      - bin/monmaptool
      - bin/rbd
      - bin/rados
      - bin/radosgw
      - bin/radosgw-admin
      - bin/rbd-mirror
      - bin/cephfs-mirror
      - bin/truncate
      - bin/uuidgen
      - lib/*/ceph
      - lib/*/libaio.so*
      - lib/*/libasn1.so*
      - lib/*/libatomic.so*
      - lib/*/libboost_context.so*
      - lib/*/libboost_filesystem.so*
      - lib/*/libboost_iostreams.so*
      - lib/*/libboost_program_options.so*
      - lib/*/libboost_python312.so*
      - lib/*/libboost_thread.so*
      - lib/*/libboost_url.so*
      - lib/*/libcephfs.so*
      - lib/*/libcephsqlite.so*
      - lib/*/libcurl-gnutls.so*
      - lib/*/libdaxctl.so*
      - lib/*/libfuse3.so*
      - lib/*/libibverbs.so*
      - lib/*/libicudata.so*
      - lib/*/libicuuc.so*
      - lib/*/liblber.so*
      - lib/*/libldap.so*
      - lib/*/libssh.so*
      - lib/*/libncurses.so*
      - lib/*/liblua5.4.so*
      - lib/*/libndctl.so*
      - lib/*/libnghttp2.so*
      - lib/*/libnuma.so*
      - lib/*/liboath.so*
      - lib/*/libpmem.so*
      - lib/*/libpmemobj.so*
      - lib/*/libpsl.so*
      - lib/*/libpython3.12.so*
      - lib/*/librabbitmq.so*
      - lib/*/librados.so*
      - lib/*/libradosgw.so*
      - lib/*/libradosstriper.so.*
      - lib/*/librbd.so*
      - lib/*/librdmacm.so*
      - lib/*/libroken.so*
      - lib/*/librtmp.so*
      - lib/*/libsasl2.so*
      - lib/*/libsnappy.so*
      - lib/*/libwind.so*
      - lib/python3
      - lib/*/rados-classes
      - lib/*/libtcmalloc.so*
      - lib/*/libunwind.so*
      - lib/*/liblmdb.so*
      - share/ceph

  dqlite:
    source: https://github.com/canonical/dqlite
    source-type: git
    source-depth: 1
    source-tag: v1.18.0
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
      - --enable-build-raft
    stage-packages:
      - libuv1
      - libsqlite3-0
      - liblz4-1
    build-packages:
      - make
      - libuv1-dev
      - liblz4-dev
      - libsqlite3-dev
      - pkg-config
    organize:
      usr/lib/: lib/
    prime:
      - lib/libdqlite*so*
      - lib/libraft*so*
      - lib/*/libuv*so*
  
  microceph:
    source: microceph/
    after:
      - dqlite
    build-snaps:
      - go
    plugin: nil
    override-pull: |
      craftctl default
      set -ex

      # Download the dependencies
      go get -d -v ./...
    override-build: |
      set -ex
      git_diff="$( git -C $CRAFT_PROJECT_DIR status -uno --porcelain )"
      if [ -n "$git_diff" ]; then
        echo "=================================================="
        echo "STOP the build: dirty worktree detected"
        echo "$git_diff"
        echo "=================================================="
        exit 1
      fi      
      # Setup build environment
      export CGO_CFLAGS="-I${CRAFT_STAGE}/include/ -I${CRAFT_STAGE}/usr/local/include/"
      export CGO_LDFLAGS="-L${CRAFT_STAGE}/lib/ -L${CRAFT_STAGE}/usr/local/lib/"
      export CGO_LDFLAGS_ALLOW="(-Wl,-wrap,pthread_create)|(-Wl,-z,now)"
      pkg_version=$( apt-cache policy ceph-common | awk '/Candidate:/{ print $2 }' )
      git_version=$(
        git -C $CRAFT_PROJECT_DIR describe \
          --always \
          --dirty \
          --abbrev=10)
      export MC_VERSION="ceph-version: $pkg_version; microceph-git: $git_version"

      # Build the binaries
      go build -trimpath -o "${CRAFT_PART_INSTALL}/bin/microceph" -ldflags "-X 'github.com/canonical/microceph/microceph/version.version=${MC_VERSION}'" ./cmd/microceph
      go build -trimpath -o "${CRAFT_PART_INSTALL}/bin/microcephd" -tags=libsqlite3 -ldflags "-X 'github.com/canonical/microceph/microceph/version.version=${MC_VERSION}'" ./cmd/microcephd

      # Strip binaries
      strip -s "${CRAFT_PART_INSTALL}/bin/microceph"
      strip -s "${CRAFT_PART_INSTALL}/bin/microcephd"
    prime:
      - bin/microceph
      - bin/microcephd

  nfs-ganesha:
    plugin: nil
    stage-packages:
      - nfs-ganesha
      - nfs-ganesha-ceph
      - nfs-ganesha-rados-grace
    organize:
      sbin/: bin/
      usr/bin/: bin/
      usr/sbin/: bin/
      usr/lib/: lib/
    prime:
      - bin/*
      - lib/*/ganesha
      - lib/*/libevent_core-*.so*
      - lib/*/libganesha_*.so*
      - lib/*/libnfsidmap.so*
      - lib/*/libntirpc.so*
      - lib/*/liburcu-bp.so*
      - lib/*/libwbclient.so*

  strip:
    after:
      - ceph
      - dqlite
      - microceph
    plugin: nil
    override-prime: |
      set -x

      # Strip libraries (excluding python3 scripts)
      find "${CRAFT_PRIME}"/lib -type f \
        -not -path "${CRAFT_PRIME}/lib/python3/*" \
        -exec strip -s {} +

  wrappers:
    plugin: dump
    source: snapcraft/
