package database

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
	"github.com/canonical/microcluster/cluster"
)

var _ = api.ServerEnvironment{}

var remoteConfigObjects = cluster.RegisterStmt(`
SELECT remote_config.id, remote.name AS remote, remote_config.key, remote_config.value
  FROM remote_config
  JOIN remote ON remote_config.remote_id = remote.id
  ORDER BY remote.id, remote_config.key
`)

var remoteConfigObjectsByKey = cluster.RegisterStmt(`
SELECT remote_config.id, remote.name AS remote, remote_config.key, remote_config.value
  FROM remote_config
  JOIN remote ON remote_config.remote_id = remote.id
  WHERE ( remote_config.key = ? )
  ORDER BY remote.id, remote_config.key
`)

var remoteConfigObjectsByRemote = cluster.RegisterStmt(`
SELECT remote_config.id, remote.name AS remote, remote_config.key, remote_config.value
  FROM remote_config
  JOIN remote ON remote_config.remote_id = remote.id
  WHERE ( remote = ? )
  ORDER BY remote.id, remote_config.key
`)

var remoteConfigObjectsByKeyAndRemote = cluster.RegisterStmt(`
SELECT remote_config.id, remote.name AS remote, remote_config.key, remote_config.value
  FROM remote_config
  JOIN remote ON remote_config.remote_id = remote.id
  WHERE ( remote_config.key = ? AND remote = ? )
  ORDER BY remote.id, remote_config.key
`)

var remoteConfigID = cluster.RegisterStmt(`
SELECT remote_config.id FROM remote_config
  JOIN remote ON remote_config.remote_id = remote.id
  WHERE remote.name = ? AND remote_config.key = ?
`)

var remoteConfigCreate = cluster.RegisterStmt(`
INSERT INTO remote_config (remote_id, key, value)
  VALUES ((SELECT remote.id FROM remote WHERE remote.name = ?), ?, ?)
`)

var remoteConfigDeleteByKey = cluster.RegisterStmt(`
DELETE FROM remote_config WHERE key = ?
`)

var remoteConfigDeleteByRemote = cluster.RegisterStmt(`
DELETE FROM remote_config WHERE remote_id = (SELECT remote.id FROM remote WHERE remote.name = ?)
`)

var remoteConfigDeleteByKeyAndRemote = cluster.RegisterStmt(`
DELETE FROM remote_config WHERE key = ? AND remote_id = (SELECT remote.id FROM remote WHERE remote.name = ?)
`)

var remoteConfigUpdate = cluster.RegisterStmt(`
UPDATE remote_config
  SET remote_id = (SELECT remote.id FROM remote WHERE remote.name = ?), key = ?, value = ?
 WHERE id = ?
`)

// remoteConfigColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the RemoteConfig entity.
func remoteConfigColumns() string {
	return "remote_config.id, remote.name AS remote, remote_config.key, remote_config.value"
}

// getRemoteConfig can be used to run handwritten sql.Stmts to return a slice of objects.
func getRemoteConfig(ctx context.Context, stmt *sql.Stmt, args ...any) ([]RemoteConfig, error) {
	objects := make([]RemoteConfig, 0)

	dest := func(scan func(dest ...any) error) error {
		r := RemoteConfig{}
		err := scan(&r.ID, &r.Remote, &r.Key, &r.Value)
		if err != nil {
			return err
		}

		objects = append(objects, r)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"remote_config\" table: %w", err)
	}

	return objects, nil
}

// getRemoteConfigRaw can be used to run handwritten query strings to return a slice of objects.
func getRemoteConfigRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]RemoteConfig, error) {
	objects := make([]RemoteConfig, 0)

	dest := func(scan func(dest ...any) error) error {
		r := RemoteConfig{}
		err := scan(&r.ID, &r.Remote, &r.Key, &r.Value)
		if err != nil {
			return err
		}

		objects = append(objects, r)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"remote_config\" table: %w", err)
	}

	return objects, nil
}

// GetRemoteConfigs returns all available RemoteConfig.
// generator: RemoteConfig GetMany
func GetRemoteConfigs(ctx context.Context, tx *sql.Tx, filters ...RemoteConfigFilter) ([]RemoteConfig, error) {
	var err error

	// Result slice.
	objects := make([]RemoteConfig, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = cluster.Stmt(tx, remoteConfigObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"remoteConfigObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Key != nil && filter.Remote != nil {
			args = append(args, []any{filter.Key, filter.Remote}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, remoteConfigObjectsByKeyAndRemote)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"remoteConfigObjectsByKeyAndRemote\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(remoteConfigObjectsByKeyAndRemote)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"remoteConfigObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Remote != nil && filter.Key == nil {
			args = append(args, []any{filter.Remote}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, remoteConfigObjectsByRemote)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"remoteConfigObjectsByRemote\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(remoteConfigObjectsByRemote)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"remoteConfigObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Key != nil && filter.Remote == nil {
			args = append(args, []any{filter.Key}...)
			if len(filters) == 1 {
				sqlStmt, err = cluster.Stmt(tx, remoteConfigObjectsByKey)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"remoteConfigObjectsByKey\" prepared statement: %w", err)
				}

				break
			}

			query, err := cluster.StmtString(remoteConfigObjectsByKey)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"remoteConfigObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.Key == nil && filter.Remote == nil {
			return nil, fmt.Errorf("Cannot filter on empty RemoteConfigFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getRemoteConfig(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getRemoteConfigRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"remote_config\" table: %w", err)
	}

	return objects, nil
}

// GetRemoteConfig returns the RemoteConfig with the given key.
// generator: RemoteConfig GetOne
func GetRemoteConfig(ctx context.Context, tx *sql.Tx, remote string, key string) (*RemoteConfig, error) {
	filter := RemoteConfigFilter{}
	filter.Remote = &remote
	filter.Key = &key

	objects, err := GetRemoteConfigs(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"remote_config\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "RemoteConfig not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"remote_config\" entry matches")
	}
}

// GetRemoteConfigID return the ID of the RemoteConfig with the given key.
// generator: RemoteConfig ID
func GetRemoteConfigID(ctx context.Context, tx *sql.Tx, remote string, key string) (int64, error) {
	stmt, err := cluster.Stmt(tx, remoteConfigID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"remoteConfigID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, remote, key)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "RemoteConfig not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"remote_config\" ID: %w", err)
	}

	return id, nil
}

// RemoteConfigExists checks if a RemoteConfig with the given key exists.
// generator: RemoteConfig Exists
func RemoteConfigExists(ctx context.Context, tx *sql.Tx, remote string, key string) (bool, error) {
	_, err := GetRemoteConfigID(ctx, tx, remote, key)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// CreateRemoteConfig adds a new RemoteConfig to the database.
// generator: RemoteConfig Create
func CreateRemoteConfig(ctx context.Context, tx *sql.Tx, object RemoteConfig) (int64, error) {
	// Check if a RemoteConfig with the same key exists.
	exists, err := RemoteConfigExists(ctx, tx, object.Remote, object.Key)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"remote_config\" entry already exists")
	}

	args := make([]any, 3)

	// Populate the statement arguments.
	args[0] = object.Remote
	args[1] = object.Key
	args[2] = object.Value

	// Prepared statement to use.
	stmt, err := cluster.Stmt(tx, remoteConfigCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"remoteConfigCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"remote_config\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"remote_config\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteRemoteConfig deletes the RemoteConfig matching the given key parameters.
// generator: RemoteConfig DeleteOne-by-Key-and-Remote
func DeleteRemoteConfig(ctx context.Context, tx *sql.Tx, key string, remote string) error {
	stmt, err := cluster.Stmt(tx, remoteConfigDeleteByKeyAndRemote)
	if err != nil {
		return fmt.Errorf("Failed to get \"remoteConfigDeleteByKeyAndRemote\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(key, remote)
	if err != nil {
		return fmt.Errorf("Delete \"remote_config\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "RemoteConfig not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d RemoteConfig rows instead of 1", n)
	}

	return nil
}

// DeleteRemoteConfig deletes the RemoteConfig matching the given key parameters.
// generator: RemoteConfig DeleteMany-by-Remote
func DeleteRemoteConfigs(ctx context.Context, tx *sql.Tx, remote string) error {
	stmt, err := cluster.Stmt(tx, remoteConfigDeleteByRemote)
	if err != nil {
		return fmt.Errorf("Failed to get \"remoteConfigDeleteByRemote\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(remote)
	if err != nil {
		return fmt.Errorf("Delete \"remote_config\": %w", err)
	}

	_, err = result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	return nil
}

// UpdateRemoteConfig updates the RemoteConfig matching the given key parameters.
// generator: RemoteConfig Update
func UpdateRemoteConfig(ctx context.Context, tx *sql.Tx, remote string, key string, object RemoteConfig) error {
	id, err := GetRemoteConfigID(ctx, tx, remote, key)
	if err != nil {
		return err
	}

	stmt, err := cluster.Stmt(tx, remoteConfigUpdate)
	if err != nil {
		return fmt.Errorf("Failed to get \"remoteConfigUpdate\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(object.Remote, object.Key, object.Value, id)
	if err != nil {
		return fmt.Errorf("Update \"remote_config\" entry failed: %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n != 1 {
		return fmt.Errorf("Query updated %d rows instead of 1", n)
	}

	return nil
}
