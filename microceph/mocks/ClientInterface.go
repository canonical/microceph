// Code generated by mockery v2.30.10. DO NOT EDIT.

package mocks

import (
	client "github.com/canonical/microcluster/v2/client"

	mock "github.com/stretchr/testify/mock"

	types "github.com/canonical/microceph/microceph/api/types"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// DeleteClusterMember provides a mock function with given fields: _a0, _a1, _a2
func (_m *ClientInterface) DeleteClusterMember(_a0 *client.Client, _a1 string, _a2 bool) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(*client.Client, string, bool) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteService provides a mock function with given fields: _a0, _a1, _a2
func (_m *ClientInterface) DeleteService(_a0 *client.Client, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(*client.Client, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClusterMembers provides a mock function with given fields: _a0
func (_m *ClientInterface) GetClusterMembers(_a0 *client.Client) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.Client) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.Client) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.Client) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDisks provides a mock function with given fields: _a0
func (_m *ClientInterface) GetDisks(_a0 *client.Client) (types.Disks, error) {
	ret := _m.Called(_a0)

	var r0 types.Disks
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.Client) (types.Disks, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.Client) types.Disks); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Disks)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.Client) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: _a0
func (_m *ClientInterface) GetServices(_a0 *client.Client) (types.Services, error) {
	ret := _m.Called(_a0)

	var r0 types.Services
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.Client) (types.Services, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.Client) types.Services); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Services)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.Client) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
