// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	state "github.com/canonical/microcluster/v2/state" // mockery gets confused about import paths here

	types "github.com/canonical/microceph/microceph/api/types"
)

// OSDQueryInterface is an autogenerated mock type for the OSDQueryInterface type
type OSDQueryInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, s, osd
func (_m *OSDQueryInterface) Delete(ctx context.Context, s state.State, osd int64) error {
	ret := _m.Called(ctx, s, osd)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, state.State, int64) error); ok {
		r0 = rf(ctx, s, osd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HaveOSD provides a mock function with given fields: ctx, s, osd
func (_m *OSDQueryInterface) HaveOSD(ctx context.Context, s state.State, osd int64) (bool, error) {
	ret := _m.Called(ctx, s, osd)

	if len(ret) == 0 {
		panic("no return value specified for HaveOSD")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, state.State, int64) (bool, error)); ok {
		return rf(ctx, s, osd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, state.State, int64) bool); ok {
		r0 = rf(ctx, s, osd)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, state.State, int64) error); ok {
		r1 = rf(ctx, s, osd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, s
func (_m *OSDQueryInterface) List(ctx context.Context, s state.State) (types.Disks, error) {
	ret := _m.Called(ctx, s)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 types.Disks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, state.State) (types.Disks, error)); ok {
		return rf(ctx, s)
	}
	if rf, ok := ret.Get(0).(func(context.Context, state.State) types.Disks); ok {
		r0 = rf(ctx, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Disks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, state.State) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Path provides a mock function with given fields: ctx, s, osd
func (_m *OSDQueryInterface) Path(ctx context.Context, s state.State, osd int64) (string, error) {
	ret := _m.Called(ctx, s, osd)

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, state.State, int64) (string, error)); ok {
		return rf(ctx, s, osd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, state.State, int64) string); ok {
		r0 = rf(ctx, s, osd)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, state.State, int64) error); ok {
		r1 = rf(ctx, s, osd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePath provides a mock function with given fields: ctx, s, osd, path
func (_m *OSDQueryInterface) UpdatePath(ctx context.Context, s state.State, osd int64, path string) error {
	ret := _m.Called(ctx, s, osd, path)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePath")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, state.State, int64, string) error); ok {
		r0 = rf(ctx, s, osd, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOSDQueryInterface creates a new instance of OSDQueryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOSDQueryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OSDQueryInterface {
	mock := &OSDQueryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
