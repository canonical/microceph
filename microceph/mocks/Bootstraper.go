// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/canonical/microceph/microceph/common"

	interfaces "github.com/canonical/microceph/microceph/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// Bootstraper is an autogenerated mock type for the Bootstraper type
type Bootstraper struct {
	mock.Mock
}

// Bootstrap provides a mock function with given fields: ctx, state
func (_m *Bootstraper) Bootstrap(ctx context.Context, state interfaces.StateInterface) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for Bootstrap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.StateInterface) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Precheck provides a mock function with given fields: ctx, state
func (_m *Bootstraper) Precheck(ctx context.Context, state interfaces.StateInterface) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for Precheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.StateInterface) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Prefill provides a mock function with given fields: bd
func (_m *Bootstraper) Prefill(bd common.BootstrapConfig) error {
	ret := _m.Called(bd)

	if len(ret) == 0 {
		panic("no return value specified for Prefill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.BootstrapConfig) error); ok {
		r0 = rf(bd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBootstraper creates a new instance of Bootstraper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBootstraper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bootstraper {
	mock := &Bootstraper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
